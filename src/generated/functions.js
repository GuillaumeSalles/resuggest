// Generated by BUCKLESCRIPT VERSION 1.8.2, PLEASE EDIT WITH CARE
'use strict';

var $$String    = require("bs-platform/lib/js/string.js");
var Caml_float  = require("bs-platform/lib/js/caml_float.js");
var Caml_int32  = require("bs-platform/lib/js/caml_int32.js");
var Pervasives  = require("bs-platform/lib/js/pervasives.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Caml_string = require("bs-platform/lib/js/caml_string.js");

var int_int = /* array */[
  /* tuple */[
    (function (prim) {
        return -prim | 0;
      }),
    "(~-)"
  ],
  /* tuple */[
    (function (prim) {
        return prim;
      }),
    "(~+)"
  ],
  /* tuple */[
    (function (prim) {
        return prim + 1 | 0;
      }),
    "succ"
  ],
  /* tuple */[
    (function (prim) {
        return prim - 1 | 0;
      }),
    "pred"
  ],
  /* tuple */[
    Pervasives.abs,
    "abs"
  ],
  /* tuple */[
    Pervasives.lnot,
    "lnot"
  ]
];

var int_int_int = /* array */[
  /* tuple */[
    (function (prim, prim$1) {
        return prim + prim$1 | 0;
      }),
    "(+)"
  ],
  /* tuple */[
    (function (prim, prim$1) {
        return prim - prim$1 | 0;
      }),
    "(-)"
  ],
  /* tuple */[
    Caml_int32.imul,
    "(*)"
  ],
  /* tuple */[
    Caml_int32.div,
    "(/)"
  ],
  /* tuple */[
    Caml_int32.mod_,
    "(mod)"
  ],
  /* tuple */[
    (function (prim, prim$1) {
        return prim & prim$1;
      }),
    "(land)"
  ],
  /* tuple */[
    (function (prim, prim$1) {
        return prim | prim$1;
      }),
    "(lor)"
  ],
  /* tuple */[
    (function (prim, prim$1) {
        return prim ^ prim$1;
      }),
    "(lxor)"
  ],
  /* tuple */[
    (function (prim, prim$1) {
        return (prim << prim$1);
      }),
    "lsl"
  ],
  /* tuple */[
    (function (prim, prim$1) {
        return (prim >>> prim$1) | 0;
      }),
    "lsr"
  ],
  /* tuple */[
    (function (prim, prim$1) {
        return (prim >> prim$1);
      }),
    "ars"
  ]
];

var float_float = /* array */[
  /* tuple */[
    (function (prim) {
        return -prim;
      }),
    "(~-.)"
  ],
  /* tuple */[
    (function (prim) {
        return prim;
      }),
    "(~+.)"
  ],
  /* tuple */[
    (function (prim) {
        return Math.sqrt(prim);
      }),
    "sqrt"
  ],
  /* tuple */[
    (function (prim) {
        return Math.exp(prim);
      }),
    "exp"
  ],
  /* tuple */[
    (function (prim) {
        return Math.log(prim);
      }),
    "log"
  ],
  /* tuple */[
    (function (prim) {
        return Math.log10(prim);
      }),
    "log10"
  ],
  /* tuple */[
    Caml_float.caml_expm1_float,
    "expm1"
  ],
  /* tuple */[
    (function (prim) {
        return Math.cos(prim);
      }),
    "cos"
  ],
  /* tuple */[
    (function (prim) {
        return Math.sin(prim);
      }),
    "sin"
  ],
  /* tuple */[
    (function (prim) {
        return Math.tan(prim);
      }),
    "tan"
  ],
  /* tuple */[
    (function (prim) {
        return Math.acos(prim);
      }),
    "acos"
  ],
  /* tuple */[
    (function (prim) {
        return Math.asin(prim);
      }),
    "asin"
  ],
  /* tuple */[
    (function (prim) {
        return Math.atan(prim);
      }),
    "atan"
  ],
  /* tuple */[
    (function (prim) {
        return Math.cosh(prim);
      }),
    "cosh"
  ],
  /* tuple */[
    (function (prim) {
        return Math.sinh(prim);
      }),
    "sinh"
  ],
  /* tuple */[
    (function (prim) {
        return Math.tanh(prim);
      }),
    "tanh"
  ],
  /* tuple */[
    (function (prim) {
        return Math.ceil(prim);
      }),
    "ceil"
  ],
  /* tuple */[
    (function (prim) {
        return Math.floor(prim);
      }),
    "floor"
  ],
  /* tuple */[
    (function (prim) {
        return Math.abs(prim);
      }),
    "abs_float"
  ]
];

var float_float_float = /* array */[
  /* tuple */[
    (function (prim, prim$1) {
        return prim + prim$1;
      }),
    "(+.)"
  ],
  /* tuple */[
    (function (prim, prim$1) {
        return prim - prim$1;
      }),
    "(-.)"
  ],
  /* tuple */[
    (function (prim, prim$1) {
        return prim * prim$1;
      }),
    "(*.)"
  ],
  /* tuple */[
    (function (prim, prim$1) {
        return prim / prim$1;
      }),
    "(/.)"
  ],
  /* tuple */[
    (function (prim, prim$1) {
        return Math.pow(prim, prim$1);
      }),
    "(**)"
  ],
  /* tuple */[
    (function (prim, prim$1) {
        return Math.atan2(prim, prim$1);
      }),
    "atan2"
  ],
  /* tuple */[
    Caml_float.caml_hypot_float,
    "hypot"
  ],
  /* tuple */[
    Caml_float.caml_copysign_float,
    "copysign"
  ],
  /* tuple */[
    (function (prim, prim$1) {
        return prim % prim$1;
      }),
    "mod_float"
  ]
];

var string_int_chat = /* array */[/* tuple */[
    Caml_string.get,
    "String.get"
  ]];

var int_char_string = /* array */[/* tuple */[
    $$String.make,
    "String.make"
  ]];

var int_intchar_string = /* array */[/* tuple */[
    $$String.init,
    "String.init"
  ]];

var string_int_int_string = /* array */[/* tuple */[
    $$String.sub,
    "String.sub"
  ]];

var intcharchar_string_string = /* array */[/* tuple */[
    $$String.mapi,
    "String.mapi"
  ]];

var charchar_string_string = /* array */[/* tuple */[
    $$String.map,
    "String.map"
  ]];

var string_string = /* array */[
  /* tuple */[
    $$String.trim,
    "String.trim"
  ],
  /* tuple */[
    $$String.escaped,
    "String.escaped"
  ],
  /* tuple */[
    $$String.uppercase,
    "String.uppercase"
  ],
  /* tuple */[
    $$String.lowercase,
    "String.lowercase"
  ],
  /* tuple */[
    $$String.capitalize,
    "String.capitalize"
  ],
  /* tuple */[
    $$String.uncapitalize,
    "String.uncapitalize"
  ]
];

var string_char_int = /* array */[
  /* tuple */[
    $$String.index,
    "String.index"
  ],
  /* tuple */[
    $$String.rindex,
    "String.rindex"
  ]
];

var string_int_char_int = /* array */[
  /* tuple */[
    $$String.index_from,
    "String.index_from"
  ],
  /* tuple */[
    $$String.rindex_from,
    "String.rindex_from"
  ]
];

var string_char_bool = /* array */[/* tuple */[
    $$String.contains,
    "String.contains"
  ]];

var string_int_char_bool = /* array */[
  /* tuple */[
    $$String.contains_from,
    "String.contains_from"
  ],
  /* tuple */[
    $$String.rcontains_from,
    "String.rcontains_from"
  ]
];

var string_string_string = /* array */[/* tuple */[
    Pervasives.$caret,
    "(^)"
  ]];

var bool_string = /* array */[/* tuple */[
    Pervasives.string_of_bool,
    "string_of_bool"
  ]];

var string_bool = /* array */[/* tuple */[
    Pervasives.bool_of_string,
    "bool_of_string"
  ]];

var int_string = /* array */[/* tuple */[
    Pervasives.string_of_int,
    "string_of_int"
  ]];

var string_int = /* array */[
  /* tuple */[
    Caml_format.caml_int_of_string,
    "int_of_string"
  ],
  /* tuple */[
    (function (prim) {
        return prim.length;
      }),
    "String.length"
  ]
];

var float_string = /* array */[/* tuple */[
    Pervasives.string_of_float,
    "string_of_float"
  ]];

var string_float = /* array */[/* tuple */[
    Caml_format.caml_float_of_string,
    "float_of_string"
  ]];

exports.int_int                   = int_int;
exports.int_int_int               = int_int_int;
exports.float_float               = float_float;
exports.float_float_float         = float_float_float;
exports.string_int_chat           = string_int_chat;
exports.int_char_string           = int_char_string;
exports.int_intchar_string        = int_intchar_string;
exports.string_int_int_string     = string_int_int_string;
exports.intcharchar_string_string = intcharchar_string_string;
exports.charchar_string_string    = charchar_string_string;
exports.string_string             = string_string;
exports.string_char_int           = string_char_int;
exports.string_int_char_int       = string_int_char_int;
exports.string_char_bool          = string_char_bool;
exports.string_int_char_bool      = string_int_char_bool;
exports.string_string_string      = string_string_string;
exports.bool_string               = bool_string;
exports.string_bool               = string_bool;
exports.int_string                = int_string;
exports.string_int                = string_int;
exports.float_string              = float_string;
exports.string_float              = string_float;
/* No side effect */
